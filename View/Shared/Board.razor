@using Model.Entities.MonolithArena.GameContent
@using Position = Model.Entities.MonolithArena.InGame.Position
@inject IGameRepository GameRepository
@inject IFieldRepository FieldRepository

<DataInit Data="_items">
    <ChildContent Context="items">
        <MudDropContainer T="Tile" Items="items" ApplyDropClassesOnDragStarted="false" ItemsSelector="@((item, dropzone) => CanPlace(item, dropzone))" CanDropClass="mud-border-success" NoDropClass="mud-border-error" ItemDropped="TilePlaced">
            <ChildContent>
                <div class="board">
                    <i>@*This is necessary. Otherwise the position of the fiels won't work.*@</i>
                    @for (var x = -2; x <= 2; x++)
                    {
                        var axisX = x.ToString();
                        @for (var y = -2; y <= 2; y++)
                        {
                            var axisY = y.ToString();
                            @for (var z = -2; z <= 2; z++)
                            {
                                var axisZ = z.ToString();
                                if (x + y + z != 0)
                                    continue;

                                <MudDropZone T="DropItem" Identifier="@($"{axisX};{axisY};{axisZ}")" Class="field-container"/>
                            }
                        }
                    }
                </div>
            </ChildContent>
            <ItemRenderer>
                @if (context is Champion champion)
                {
                    <div>@champion.Name</div>
                }
                @if (context is Rune rune)
                {
                    <div>@rune.RuneType</div>
                }
            </ItemRenderer>
        </MudDropContainer>
    </ChildContent>
</DataInit>

@code {
    [Parameter]
    public int GameId { get; set; }

    [Parameter]
    public int PositionId { get; set; }

    private List<DropItem> _items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var currentGame = await GameRepository.ReadAsync(GameId);
        if (currentGame == null)
        {
            throw new NotImplementedException();
        }
        
        var currentPosition = currentGame.Positions.FirstOrDefault(e => e.Id == PositionId);
        if (currentPosition == null)
        {
            throw new NotImplementedException();
        }

        var occupiedFields = currentPosition.Fields;
        _items = new List<DropItem>();

        foreach (var occupiedField in occupiedFields)
        {
            _items.Add(new DropItem()
            {
                
            });
        }
    }

    private bool CanPlace(Tile item, string dropzone)
    {
        throw new NotImplementedException();
    }

    private void TilePlaced(MudItemDropInfo<Tile> tile)
    {
        throw new NotImplementedException();
    }

    public class DropItem
    {
        public string Icon { get; init; }
        public Color Color { get; init; }
        public string Identifier { get; set; }
    }

}

<style>
    .board {
        font-size: 0; /*disable white space between inline block element */
        width: min(100%, 50rem);
        aspect-ratio: 1.0825 / 1;
        margin: 0 auto;
    }
    
    .field-container {
        width: calc(100 / 500 * 100%);
        aspect-ratio: 0.866 / 1;
        display: inline-block;
        background:  red;
        font-size: initial;
        clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
        background: red;
        margin-bottom: calc(-100 / 500 * 100% / 0.866 * 0.25);
        shape-outside: polygon(
            0% 25%,
            0% 75%,
            50% 100%,
            100% 75%,
            100% 25%,
            50% 0%
        );
    }
    
    i::before {
        content: "";
        width: calc(100 / 500 * 100%);
        float: left;
        height: 100%;
        shape-outside: polygon(
            0% 0%,
            100% 0%,
            0% 37.5%,
            0% calc(62.5% - 100 / 500 * 100% / 0.866 * 0.25),
            100% calc(99% - 100 / 500 * 100% / 0.866 * 0.25),
            0% calc(99% - 100 / 500 * 100% / 0.866 * 0.25)
        );
    }
    
    i::after {
        content: "";
        width: calc(100 / 500 * 100%);
        float: right;
        height: 100%;
        shape-outside: polygon(
            100% 0%,
            0% 0%,
            100% 30%,
            100% calc(70% - 100 / 500 * 100% / 0.866 * 0.25),
            0% calc(100% - 100 / 500 * 100% / 0.866 * 0.25),
            100% calc(100% - 100 / 500 * 100% / 0.866 * 0.25)
        );
    }
</style>